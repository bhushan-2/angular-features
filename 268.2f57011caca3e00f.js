"use strict";(self.webpackChunkangular_versions=self.webpackChunkangular_versions||[]).push([[268],{5268:(m,u,l)=>{l.r(u),l.d(u,{Angular12Module:()=>a});var c=l(6895),s=l(3329),e=l(4650);const g=function(){return["/"]};class o{constructor(){this.nullishCoalescing="\n  {{age !== null && age !== undefined ? age : calculateAge() }}\n  Becomes:\n  {{ age ?? calculateAge() }}\n  ",this.httpStatus="\n  if (response.status === HttpStatusCode.Ok) {\n    ...\n   }",this.cssBefore="\n    @import '~@angular/material/theming;\n    @include mat-core();\n    $primary: mat-palette($mat-indigo);\n    $accent:  mat-palette($mat-pink);\n    $theme: mat-light-theme((\n      color: (\n        primary: $primary,\n        accent: $accent\n      )\n    ));\n    @include angular-material-theme($theme);",this.cssAfter="\n  // AFTER\n  @use '~@angular/material' as mat;\n  @include mat.core();\n  $primary: mat.define-palette(palette.$indigo-palette);\n  $accent:  mat.define-palette(palette.$pink-palette);\n  $theme: mat.define-light-theme((\n    color: (\n      primary: $primary,\n      accent: $accent\n    )\n  ));\n  @include mat.all-component-themes($theme);"}}o.\u0275fac=function(t){return new(t||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["app-angular12"]],decls:50,vars:6,consts:[[1,"container-fluid"],[1,"row"],[1,"col-md-12","pd-0"],[1,"angular-12"],[1,"back",3,"routerLink"],[1,"row","features-scroll"],[1,"col-md-12"],[1,"feature"],[1,"terminal"]],template:function(t,r){1&t&&(e.TgZ(0,"div",0)(1,"div",1)(2,"div",2)(3,"div",3)(4,"label"),e._uU(5,"Angular 12 Features"),e.qZA(),e.TgZ(6,"div"),e._uU(7,"(Released on May 2021)"),e.qZA(),e.TgZ(8,"div",4),e._uU(9," < Back"),e.qZA()()()(),e.TgZ(10,"div",5)(11,"div",6)(12,"div",7)(13,"label"),e._uU(14,"1. Nullish Coalescing"),e.qZA(),e.TgZ(15,"p"),e._uU(16," The nullish coalescing operator (??) has been assisting engineers with composing cleaner code in TypeScript classes for some time now. One of the main highlights of this feature is that you can bring the force of nullish coalescing to Angular templates in v12! "),e.qZA(),e.TgZ(17,"p"),e._uU(18,"Presently, in templates, engineers can utilize the new syntax structure to improve the complex conditionals. For instance:"),e.qZA(),e.TgZ(19,"div",8)(20,"pre"),e._uU(21),e.qZA()()(),e.TgZ(22,"div",7)(23,"label"),e._uU(24,"2. HTTP improvements"),e.qZA(),e.TgZ(25,"p"),e._uU(26," Angular 12 features its own list of intelligible names for HTTP status codes, in the form of a const enum. Because of this new element, we can now utilize HttpStatusCode instead of introducing our own solution to have human-readable names. "),e.qZA(),e.TgZ(27,"p"),e._uU(28,"Presently, in templates, engineers can utilize the new syntax structure to improve the complex conditionals."),e.qZA(),e.TgZ(29,"div",8)(30,"pre"),e._uU(31),e.qZA()()(),e.TgZ(32,"div",7)(33,"label"),e._uU(34,"3. Styling improvements"),e.qZA(),e.TgZ(35,"p"),e._uU(36,' Starting in v12, Angular components will now support inline Sass in the styles field of the @Component decorator. Previously, Sass was only available in external resources due to the Angular compiler. To enable this feature in your existing applications add "inlineStyleLanguage": "scss\u201d to angular.json. Otherwise, it will be available to new projects using SCSS. '),e.qZA(),e.TgZ(37,"p"),e._uU(38,"Additionally, Angular Material and Angular CDK have internally adopted a new Sass module framework. Finally, angular 12 now also supports Tailwind CSS. "),e.qZA(),e.TgZ(39,"p"),e._uU(40,"Before"),e.qZA(),e.TgZ(41,"div",8)(42,"pre"),e._uU(43),e.qZA()(),e._UZ(44,"br"),e.TgZ(45,"p"),e._uU(46,"After"),e.qZA(),e.TgZ(47,"div",8)(48,"pre"),e._uU(49),e.qZA()()()()()()),2&t&&(e.xp6(8),e.Q6J("routerLink",e.DdM(5,g)),e.xp6(13),e.Oqu(r.nullishCoalescing),e.xp6(10),e.Oqu(r.httpStatus),e.xp6(12),e.Oqu(r.cssBefore),e.xp6(6),e.Oqu(r.cssAfter))},dependencies:[s.rH],styles:[".angular-12[_ngcontent-%COMP%]{width:100%;padding:10px;background:#1976d2}.angular-12[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{font-size:16px;font-weight:600;color:#fff;margin-left:20px}.angular-12[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{font-size:12px;font-weight:400;color:#ccc;display:inline-block;margin-left:10px}"]});const p=[{path:"",component:o}];class n{}n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=e.oAB({type:n}),n.\u0275inj=e.cJS({imports:[s.Bz.forChild(p),s.Bz]});class a{}a.\u0275fac=function(t){return new(t||a)},a.\u0275mod=e.oAB({type:a}),a.\u0275inj=e.cJS({imports:[c.ez,n]})}}]);